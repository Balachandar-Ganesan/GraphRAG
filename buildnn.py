# -*- coding: utf-8 -*-
"""BuildNN.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/github/Balachandar-Ganesan/GraphRAG/blob/main/BuildNN.ipynb
"""

import string

def count_letters(name):
  """
  Counts the frequency of each letter in a name and returns a list of 26 integers.

  Args:
    name: The input name as a string.

  Returns:
    A list of 26 integers, where the value at each index corresponds to
    the count of the letter at that index in the lowercase English alphabet.
  """

  # 1. Initialize a list of 26 zeros, one for each letter of the alphabet.
  counts = [0] * 26  #

  # 2. Convert the input name to lowercase to ensure case-insensitivity.
  lower_name = name.lower()

  # 3. Iterate through each character in the alphabet.
  for i, letter in enumerate(string.ascii_lowercase): #
    # 4. Count the occurrences of the current letter in the name.
    letter_count = lower_name.count(letter)  #

    # 5. Assign the count to the corresponding index in the results list.
    counts[i] = letter_count

  return counts

# Example usage:
my_name = "Mamata Banerjee"
letter_counts = count_letters(my_name)

print(f"Name: {my_name}")
print(f"Letter counts: {letter_counts}")

# Optional: To see which letter corresponds to each count
for i, count in enumerate(letter_counts):
  letter = string.ascii_lowercase[i]
  if count > 0:
    print(f"'{letter}': {count}")

def nameEmbedding(name,intGender):
  letter_counts = count_letters(name)
  letter_counts.append(intGender)
  #print(letter_counts
  return (letter_counts)

!pip install Faker

from faker import Faker
import pandas as pd

    # Initialize Faker with the Indian English locale (en_IN)
fake = Faker('en_IN')



lstnameEmbedding=[]

    # Generate multiple Indian male names

for _ in range(500):
        lstnameEmbedding.append(nameEmbedding(fake.name_male(),0.9))




    # Generate multiple Indian female names

for _ in range(500):
        lstnameEmbedding.append(nameEmbedding(fake.name_female(),0.1))
df = pd.DataFrame(lstnameEmbedding)
df.to_csv('nameEmbedding.csv', index=False)

import numpy as np
import torch
import torch.nn as nn
import torch.optim as optim

# load the dataset, split into input (X) and output (y) variables
dataset = np.genfromtxt('/content/nameEmbedding.csv', delimiter=',',skip_header=1)
X = dataset[:,0:26]
y = dataset[:,26]

X = torch.tensor(X, dtype=torch.float32)
y = torch.tensor(y, dtype=torch.float32).reshape(-1, 1)

# define the model
model = nn.Sequential(
    nn.Linear(26, 12),
    nn.ReLU(),
    nn.Linear(12, 8),
    nn.ReLU(),
    nn.Linear(8, 1),
    nn.Sigmoid()
)
print(model)

# train the model
loss_fn   = nn.BCELoss()  # binary cross entropy
optimizer = optim.Adam(model.parameters(), lr=0.001)

n_epochs = 100
batch_size = 10

for epoch in range(n_epochs):
    for i in range(0, len(X), batch_size):
        Xbatch = X[i:i+batch_size]
        y_pred = model(Xbatch)
        ybatch = y[i:i+batch_size]
        loss = loss_fn(y_pred, ybatch)
        optimizer.zero_grad()
        loss.backward()
        optimizer.step()
    print(f'Finished epoch {epoch}, latest loss {loss}')

# compute accuracy (no_grad is optional)

def predictGenderFromName(strName):
  y_pred=model(torch.tensor(count_letters(strName),dtype=torch.float32))

  if y_pred >0.5:
      print('Male')
  else:
      print('Female')

predictGenderFromName('Kamlesh')
predictGenderFromName('Vidhya')
predictGenderFromName('Paramita')
predictGenderFromName('Mounika')
predictGenderFromName('Ashwin')
predictGenderFromName('Balachandar')
predictGenderFromName('Sunil')

#wrong predictions increase epoch to 1000 train the model again and verify
print('if Wrong , Increase epoch to 1000 and see results')
predictGenderFromName('Sangeetha')
predictGenderFromName('Supriya')